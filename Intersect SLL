#include <stdio.h>
#include <stdlib.h>

// Node definition
struct Node {
    int data;
    struct Node* next;
};

// Function to create new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to get length of a list
int getLength(struct Node* head) {
    int len = 0;
    while (head) {
        len++;
        head = head->next;
    }
    return len;
}

// Function to find intersection node
struct Node* getIntersectionNode(struct Node* head1, struct Node* head2) {
    int len1 = getLength(head1);
    int len2 = getLength(head2);

    int diff = abs(len1 - len2);

    // Move longer list ahead by 'diff' nodes
    if (len1 > len2) {
        for (int i = 0; i < diff; i++) head1 = head1->next;
    } else {
        for (int i = 0; i < diff; i++) head2 = head2->next;
    }

    // Move both lists together until intersection is found
    while (head1 && head2) {
        if (head1 == head2)  // checking same node (address), not just value
            return head1;
        head1 = head1->next;
        head2 = head2->next;
    }
    return NULL;
}

int main() {
    // Create two linked lists that intersect
    struct Node* head1 = createNode(1);
    head1->next = createNode(2);
    head1->next->next = createNode(3);

    struct Node* head2 = createNode(4);
    head2->next = createNode(5);

    // Create intersection
    struct Node* common = createNode(6);
    common->next = createNode(7);

    head1->next->next->next = common; // 3 → 6
    head2->next->next = common;       // 5 → 6

    // Find intersection
    struct Node* intersectNode = getIntersectionNode(head1, head2);

    if (intersectNode)
        printf("Intersection at node with value: %d\n", intersectNode->data);
    else
        printf("No intersection found.\n");

    return 0;
}
