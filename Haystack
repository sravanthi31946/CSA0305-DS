#include <stdio.h>
#include <stdlib.h>

#define SIZE 10

int hashTable[SIZE];

// Initialize table
void init() {
    for (int i = 0; i < SIZE; i++) {
        hashTable[i] = -1; // -1 means empty
    }
}

// Hash function
int hash(int key) {
    return key % SIZE;
}

// Insert key
void insert(int key) {
    int index = hash(key);
    int i = 0;

    while (hashTable[(index + i) % SIZE] != -1) {
        i++;
        if (i == SIZE) {
            printf("Hash table full, cannot insert %d\n", key);
            return;
        }
    }
    hashTable[(index + i) % SIZE] = key;
    printf("%d inserted at index %d\n", key, (index + i) % SIZE);
}

// Search key
int search(int key) {
    int index = hash(key);
    int i = 0;

    while (hashTable[(index + i) % SIZE] != -1) {
        if (hashTable[(index + i) % SIZE] == key) {
            return (index + i) % SIZE;
        }
        i++;
        if (i == SIZE) break;
    }
    return -1;
}

// Display table
void display() {
    printf("\nHash Table:\n");
    for (int i = 0; i < SIZE; i++) {
        if (hashTable[i] != -1)
            printf("Index %d -> %d\n", i, hashTable[i]);
        else
            printf("Index %d -> EMPTY\n", i);
    }
}

int main() {
    init();

    insert(5);
    insert(15);
    insert(25);
    insert(35);

    display();

    int key = 25;
    int pos = search(key);
    if (pos != -1)
        printf("\nKey %d found at index %d\n", key, pos);
    else
        printf("\nKey %d not found\n", key);

    return 0;
}
